From 7d0e0543ddcd869d5b4eab8ad8eed502f7e754e2 Mon Sep 17 00:00:00 2001
From: Minmin Gong <gongminmin@msn.com>
Date: Tue, 1 Dec 2020 00:48:49 -0800
Subject: [PATCH] Fix compiling warnings on clang-cl

---
 alc/hrtf.cpp        | 4 ++--
 alc/panning.cpp     | 2 +-
 common/almalloc.cpp | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/alc/hrtf.cpp b/alc/hrtf.cpp
index 0b6eb434..329084d3 100644
--- a/alc/hrtf.cpp
+++ b/alc/hrtf.cpp
@@ -963,7 +963,7 @@ std::unique_ptr<HrtfStore> LoadHrtf02(std::istream &data, const char *filename)
             elevs__end = std::copy_backward(elevs_src, elevs_src+field.evCount, elevs__end);
             return ebase + field.evCount;
         };
-        std::accumulate(fields.cbegin(), fields.cend(), ptrdiff_t{0}, copy_azs);
+        (void)std::accumulate(fields.cbegin(), fields.cend(), ptrdiff_t{0}, copy_azs);
         assert(elevs_.begin() == elevs__end);
 
         /* Reestablish the IR offset for each elevation index, given the new
@@ -998,7 +998,7 @@ std::unique_ptr<HrtfStore> LoadHrtf02(std::istream &data, const char *filename)
 
             return ebase + field.evCount;
         };
-        std::accumulate(fields.cbegin(), fields.cend(), ptrdiff_t{0}, copy_irs);
+        (void)std::accumulate(fields.cbegin(), fields.cend(), ptrdiff_t{0}, copy_irs);
         assert(coeffs_.begin() == coeffs_end);
         assert(delays_.begin() == delays_end);
 
diff --git a/alc/panning.cpp b/alc/panning.cpp
index 435555d2..a0fbcfc5 100644
--- a/alc/panning.cpp
+++ b/alc/panning.cpp
@@ -810,7 +810,7 @@ void aluInitRenderer(ALCdevice *device, ALint hrtf_id, HrtfRequestMode hrtf_appr
             device->HrtfName = hrtfname;
             return true;
         };
-        std::find_if(device->HrtfList.cbegin(), device->HrtfList.cend(), find_hrtf);
+        (void)std::find_if(device->HrtfList.cbegin(), device->HrtfList.cend(), find_hrtf);
     }
 
     if(device->mHrtf)
diff --git a/common/almalloc.cpp b/common/almalloc.cpp
index 842fb400..7a369c30 100644
--- a/common/almalloc.cpp
+++ b/common/almalloc.cpp
@@ -19,7 +19,7 @@ void *al_malloc(size_t alignment, size_t size)
     assert((alignment & (alignment-1)) == 0);
     alignment = std::max(alignment, alignof(std::max_align_t));
 
-#if ALIGNED_ALLOC_AVAILABLE
+#if ALIGNED_ALLOC_AVAILABLE && !(defined(_MSC_VER) && defined(__clang__))
     size = (size+(alignment-1))&~(alignment-1);
     return aligned_alloc(alignment, size);
 #elif defined(HAVE_POSIX_MEMALIGN)
-- 
2.17.1.windows.2

